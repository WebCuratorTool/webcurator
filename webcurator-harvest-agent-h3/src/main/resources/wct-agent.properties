#HarvestAgent

# name of the directory where the temporary harvest data is stored
harvestAgent.baseHarvestDirectory=${harvest.dir:/usr/local/wct/harvest-agent}
# agent protocol type that the core knows about
harvestAgent.scheme=${agent.scheme}
# agent host name or ip address that the core knows about
harvestAgent.host=${agent.host:localhost}
# the port the agent is listening on for http connections
harvestAgent.port=${agent.port:8083}
# the max number of harvest to be run concurrently on this agent
harvestAgent.maxHarvests=${agent.maxHarvests:2}
# the name of the agent. must be unique
harvestAgent.name=${agent.name:Harvest Agent v3}
# the note to send with the harvest result.
harvestAgent.provenanceNote=${agent.provenanceNote:Original Harvest}
# the number of alerts that occur before a notification is sent
harvestAgent.alertThreshold=${agent.alertThreshold:200}
# whether to attempt to recover running harvests from H3 instance on startup.
harvestAgent.attemptHarvestRecovery=${agent.attemptHarvestRecovery:true}

# Heritrix3 Wrapper Configuration
# The H3 instance scheme.
h3Wrapper.scheme=${h3Instance.scheme}
# The H3 instance host.
h3Wrapper.host=${h3Instance.host}
# The H3 instance port.
h3Wrapper.port=${h3Instance.port}
# The H3 instance full path and filename for the keystore file.
h3Wrapper.keyStoreFile=${h3Instance.keyStoreFile}
# The H3 instance password for the keyStore file
h3Wrapper.keyStorePassword=${h3Instance.keyStorePassword}
# The H3 instance userName.
h3Wrapper.userName=${h3Instance.userName}
# The H3 instance password.
h3Wrapper.password=${h3Instance.password}


#HarvestCoordinatorNotifier
# the host protocol type of the core
harvestCoordinatorNotifier.scheme=${core.scheme:http}
# the host name or ip address of the core
harvestCoordinatorNotifier.host=${core.host:localhost}
# the protocol for the core host name or ip address
harvestCoordinatorNotifier.protocol=${core.protocol}
# the port that the core is listening on for http connections 
harvestCoordinatorNotifier.port=${core.port:8080}


#DigitalAssetStore
# the host protocol type of the digital asset store
digitalAssetStore.scheme=${das.scheme:http}
# the host name or ip address of the digital asset store
digitalAssetStore.host=${das.host:localhost}
# the port that the digital asset store is listening on for http connections
digitalAssetStore.port=${das.port:8082}


#HarvestCompleteConfig

# number of retries before increasing the wait time for level 1 to level 2
harvestCompleteConfig.levelRetryBand=${override.harvestCompleteConfig.levelRetryBand:3}
# number of seconds to wait after a failure to complete a harvest (level 1)
harvestCompleteConfig.waitOnFailureLevelOneSecs=${override.harvestCompleteConfig.waitOnFailureLevelOneSecs:300}
# number of seconds to wait after a failure to complete a harvest (level 2)
harvestCompleteConfig.waitOnFailureLevelTwoSecs=${override.harvestCompleteConfig.waitOnFailureLevelTwoSecs:600}
# number of seconds to wait after the harvester says it is finished 
harvestCompleteConfig.waitOnCompleteSeconds=${override.harvestCompleteConfig.waitOnCompleteSeconds:30}


#MemoryChecker

# The amount of memory in KB that can be used before a warning notification is sent
memoryChecker.warnThreshold=${override.memoryChecker.warnThreshold:384000}
# The amount of memory in KB that can be used before an error notification is sent
memoryChecker.errorThreshold=${override.memoryChecker.errorThreshold:512000}

#ProcessorCheck

# The minimum percentage of processor available before a warning notification is sent
processorCheck.warnThreshold=${override.processorCheck.warnThreshold:30}
# The minimum percentage of processor available before an error notification is sent
processorCheck.errorThreshold=${override.processorCheck.errorThreshold:20}

#DiskSpaceChecker

# the percentage of disk used before a warning notification is sent 
diskSpaceChecker.warnThreshold=${override.diskSpaceChecker.warnThreshold:80}
# the percentage of disk used before an error notification is sent 
diskSpaceChecker.errorThreshold=${override.diskSpaceChecker.errorThreshold:90}


#Triggers

# startDelay: delay before running the job measured in milliseconds
# repeatInterval: repeat every xx milliseconds (Note that once a day is 86,400,000 millseconds)

heartbeatTrigger.startDelay=${override.heartbeatTrigger.startDelay:10000}
heartbeatTrigger.repeatInterval=${override.heartbeatTrigger.repeatInterval:30000}

checkProcessorTrigger.startDelay=${override.checkProcessorTrigger.startDelay:15000}
checkProcessorTrigger.repeatInterval=${override.checkProcessorTrigger.repeatInterval:30000}